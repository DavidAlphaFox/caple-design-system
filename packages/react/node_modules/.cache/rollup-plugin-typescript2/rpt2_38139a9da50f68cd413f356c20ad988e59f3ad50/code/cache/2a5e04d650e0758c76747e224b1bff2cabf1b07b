{"code":"import React from 'react';\r\nimport classnames from 'classnames';\r\nimport ConfigContext from '../_config/ConfigContext';\r\nimport Text from '../Text';\r\nimport Spinner from '../Spinner';\r\nimport './Input.style.scss';\r\nexport default React.forwardRef(function (_a, ref) {\r\n    var _b, _c;\r\n    var defaultValue = _a.defaultValue, placeholder = _a.placeholder, label = _a.label, name = _a.name, type = _a.type, _d = _a.size, size = _d === void 0 ? 'normal' : _d, _e = _a.borderType, borderType = _e === void 0 ? 'border' : _e, autoFocus = _a.autoFocus, _f = _a.block, block = _f === void 0 ? false : _f, _g = _a.disabled, disabled = _g === void 0 ? false : _g, align = _a.align, prefix = _a.prefix, subfix = _a.subfix, loading = _a.loading, onInput = _a.onInput, onFocus = _a.onFocus, onBlur = _a.onBlur, onKeyDown = _a.onKeyDown, onKeyUp = _a.onKeyUp, onKeyPress = _a.onKeyPress, onChange = _a.onChange, onPressEnter = _a.onPressEnter, _h = _a.className, className = _h === void 0 ? '' : _h, style = _a.style, _j = _a.labelClassName, labelClassName = _j === void 0 ? '' : _j, labelStyle = _a.labelStyle, _k = _a.inputClassName, inputClassName = _k === void 0 ? '' : _k, inputStyle = _a.inputStyle;\r\n    var useContext = React.useContext, useState = React.useState;\r\n    var classPrefix = useContext(ConfigContext).prefix + \"-input\";\r\n    var _l = useState(false), focused = _l[0], setFocused = _l[1];\r\n    var inputClassNames = classnames(classPrefix, inputClassName, classPrefix + \"--size-\" + size, classPrefix + \"--border-type-\" + borderType, (_b = {},\r\n        _b[classPrefix + \"--disabled\"] = disabled,\r\n        _b[classPrefix + \"--focused\"] = focused,\r\n        _b));\r\n    var handleFocus = function (event) {\r\n        var _a;\r\n        setFocused(true);\r\n        (_a = onFocus) === null || _a === void 0 ? void 0 : _a(event);\r\n    };\r\n    var handleBlur = function (event) {\r\n        var _a;\r\n        setFocused(false);\r\n        (_a = onBlur) === null || _a === void 0 ? void 0 : _a(event);\r\n    };\r\n    var handleKeyDown = function (event) {\r\n        var _a, _b;\r\n        if (event.keyCode === 13) {\r\n            (_a = onPressEnter) === null || _a === void 0 ? void 0 : _a(event);\r\n        }\r\n        (_b = onKeyDown) === null || _b === void 0 ? void 0 : _b(event);\r\n    };\r\n    var iconSize = size === 'mini' ? 14 :\r\n        size === 'small' ? 16 :\r\n            size === 'normal' ? 20 :\r\n                size === 'large' ? 24 : 30;\r\n    return (<div className={classnames(classPrefix + \"--container\", className, (_c = {}, _c[classPrefix + \"--block\"] = block, _c))} style={style}>\n      {label ?\r\n        <Text paragraph size=\"small\" className={classnames(classPrefix + \"--label\", labelClassName)} style={labelStyle}>\n            {label}\n          </Text> :\r\n        null}\n\n      <div className={inputClassNames} style={inputStyle}>\n        {prefix ?\r\n        <span className={classPrefix + \"--prefix\"}>\n              {React.isValidElement(prefix) ?\r\n            React.cloneElement(prefix, { size: iconSize }) :\r\n            prefix}\n            </span> :\r\n        null}\n        <input ref={ref} type={type} defaultValue={defaultValue} name={name} placeholder={placeholder} autoFocus={autoFocus} disabled={disabled} onInput={onInput} onFocus={handleFocus} onBlur={handleBlur} onKeyDown={handleKeyDown} onKeyPress={onKeyPress} onKeyUp={onKeyUp} onChange={onChange} style={{ textAlign: align }}/>\n        {loading ?\r\n        <Spinner size={iconSize}/> :\r\n        subfix ?\r\n            <span className={classPrefix + \"--caret\"}>\n                {React.isValidElement(subfix) ?\r\n                React.cloneElement(subfix, { size: iconSize }) :\r\n                subfix}\n              </span> :\r\n            null}\n      </div>\n    </div>);\r\n});\r\n","references":["/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/node_modules/@types/react/index.d.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/node_modules/@types/classnames/index.d.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/_config/ConfigContext.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/Text/index.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/Spinner/index.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/Icon/Icon.tsx","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/Icon/IconFeather.tsx"]}
