{"code":"import React from 'react';\r\nimport classnames from 'classnames';\r\nimport ConfigContext from '../_config/ConfigContext';\r\nimport { camelToSnake } from '../../utils';\r\nimport './Popover.style.scss';\r\nexport default (function (_a) {\r\n    var _b;\r\n    var children = _a.children, content = _a.content, _c = _a.trigger, trigger = _c === void 0 ? 'click' : _c, _d = _a.placement, placement = _d === void 0 ? 'bottom' : _d, width = _a.width, _e = _a.className, className = _e === void 0 ? '' : _e, style = _a.style;\r\n    var useState = React.useState, useEffect = React.useEffect, useContext = React.useContext, useRef = React.useRef;\r\n    var _f = useState(false), visible = _f[0], setVisible = _f[1];\r\n    var wrapperRef = useRef(null);\r\n    var prefix = useContext(ConfigContext).prefix;\r\n    var classPrefix = prefix + \"-popover\";\r\n    var classNames = classnames(classPrefix, className, (_b = {},\r\n        _b[classPrefix + \"--active\"] = visible,\r\n        _b));\r\n    var handleMouseEnter = trigger === 'hover' ? function () { return setVisible(true); } : undefined;\r\n    var handleMouseLeave = trigger === 'hover' ? function () { return setVisible(false); } : undefined;\r\n    var handleClick = trigger === 'click' ? function () { return setVisible(!visible); } : undefined;\r\n    var handleClickOutside = trigger === 'click' ? function (event) {\r\n        if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\r\n            setVisible(false);\r\n        }\r\n    } : undefined;\r\n    var handleFocus = trigger === 'focus' ? function () { return setVisible(true); } : undefined;\r\n    var handleBlur = trigger === 'focus' ? function () { return setVisible(false); } : undefined;\r\n    useEffect(function () {\r\n        if (handleClickOutside) {\r\n            document.addEventListener('mousedown', handleClickOutside);\r\n            return function () { document.removeEventListener('mousedown', handleClickOutside); };\r\n        }\r\n    }, [handleClickOutside]);\r\n    var contentStyle = {\r\n        width: width ? width : 'auto',\r\n        whiteSpace: width ? 'normal' : 'nowrap',\r\n        pointerEvents: visible ? 'all' : 'none'\r\n    };\r\n    return (<div ref={wrapperRef} className={classNames} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave} style={style}>\n      <span className={classPrefix + \"--host\"} onClick={handleClick} onFocus={handleFocus} onBlur={handleBlur}>\n        {children}\n      </span>\n      <svg className={classnames(camelToSnake(placement), classPrefix + \"--caret\")} width=\"24\" height=\"12\" viewBox=\"0 0 24 12\">\n        <path fill=\"white\" strokeWidth=\"1px\" stroke=\"#EAEAEA\" fillRule=\"evenodd\" d=\"M20 12l-8-8-12 12\"/>\n      </svg>\n      <div className={classnames(camelToSnake(placement), classPrefix + \"--content\")} style={contentStyle}>\n        {content}\n      </div>\n    </div>);\r\n});\r\n","references":["/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/node_modules/@types/react/index.d.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/node_modules/@types/classnames/index.d.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/_config/ConfigContext.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/utils/index.ts"]}
