{"code":"import { __assign } from \"tslib\";\r\nimport React from 'react';\r\nimport classnames from 'classnames';\r\nimport raf from 'raf';\r\nimport ConfigContext from '../_config/ConfigContext';\r\nimport Text from '../Text';\r\nimport Spinner from '../Spinner';\r\nimport calculateNodeHeight from './calculateNodeHeight';\r\nimport './Textarea.style.scss';\r\n;\r\n;\r\nexport default (function (_a) {\r\n    var _b;\r\n    var value = _a.value, placeholder = _a.placeholder, label = _a.label, name = _a.name, _c = _a.borderType, borderType = _c === void 0 ? 'border' : _c, autoFocus = _a.autoFocus, _d = _a.disabled, disabled = _d === void 0 ? false : _d, align = _a.align, _e = _a.resizeType, resizeType = _e === void 0 ? 'vertical' : _e, _f = _a.rows, rows = _f === void 0 ? 1 : _f, _g = _a.autoSize, autoSize = _g === void 0 ? false : _g, loading = _a.loading, onInput = _a.onInput, onFocus = _a.onFocus, onBlur = _a.onBlur, onKeyDown = _a.onKeyDown, onKeyUp = _a.onKeyUp, onKeyPress = _a.onKeyPress, onChange = _a.onChange, onPressEnter = _a.onPressEnter, _h = _a.className, className = _h === void 0 ? '' : _h, style = _a.style, _j = _a.labelClassName, labelClassName = _j === void 0 ? '' : _j, labelStyle = _a.labelStyle, _k = _a.textareaClassName, textareaClassName = _k === void 0 ? '' : _k, textareaStyle = _a.textareaStyle;\r\n    var useContext = React.useContext, useState = React.useState, useRef = React.useRef, useEffect = React.useEffect;\r\n    var classPrefix = useContext(ConfigContext).prefix + \"-textarea\";\r\n    var _l = useState(false), focused = _l[0], setFocused = _l[1];\r\n    var _m = useState({}), resizeStyle = _m[0], setResizeStyle = _m[1];\r\n    var textareaRef = useRef(null);\r\n    var textareaClassNames = classnames(classPrefix, textareaClassName, classPrefix + \"--border-type-\" + borderType, (_b = {},\r\n        _b[classPrefix + \"--disabled\"] = disabled,\r\n        _b[classPrefix + \"--focused\"] = focused,\r\n        _b));\r\n    var handleFocus = function (event) {\r\n        var _a;\r\n        setFocused(true);\r\n        (_a = onFocus) === null || _a === void 0 ? void 0 : _a(event);\r\n    };\r\n    var handleBlur = function (event) {\r\n        var _a;\r\n        setFocused(false);\r\n        (_a = onBlur) === null || _a === void 0 ? void 0 : _a(event);\r\n    };\r\n    var resize = function () {\r\n        raf(function () {\r\n            if (textareaRef.current && autoSize) {\r\n                var styles = calculateNodeHeight(textareaRef.current, false, undefined, undefined);\r\n                setResizeStyle(styles);\r\n            }\r\n        });\r\n    };\r\n    var handleKeyDown = function (event) {\r\n        var _a, _b;\r\n        if (event.keyCode === 13) {\r\n            (_a = onPressEnter) === null || _a === void 0 ? void 0 : _a(event);\r\n        }\r\n        (_b = onKeyDown) === null || _b === void 0 ? void 0 : _b(event);\r\n        resize();\r\n    };\r\n    useEffect(function () {\r\n        resize();\r\n    }, [textareaRef, autoSize]);\r\n    return (<div className={classnames(classPrefix + \"--container\", className)} style={style}>\n      {label ?\r\n        <Text paragraph size=\"small\" className={classnames(classPrefix + \"--label\", labelClassName)} style={labelStyle}>\n            {label}\n          </Text> :\r\n        null}\n\n      <textarea ref={textareaRef} defaultValue={value} name={name} placeholder={placeholder} rows={rows} autoFocus={autoFocus} disabled={disabled} onInput={onInput} onFocus={handleFocus} onBlur={handleBlur} onKeyDown={handleKeyDown} onKeyPress={onKeyPress} onKeyUp={onKeyUp} onChange={onChange} className={textareaClassNames} style={__assign(__assign(__assign({}, textareaStyle), resizeStyle), { textAlign: align, resize: resizeType })}/>\n      {loading ? <Spinner size={16} className={classPrefix + \"--loading\"}/> : null}\n    </div>);\r\n});\r\n","references":["/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/node_modules/@types/react/index.d.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/node_modules/@types/classnames/index.d.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/node_modules/@types/raf/index.d.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/_config/ConfigContext.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/Text/index.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/Spinner/index.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/Input/calculateNodeHeight.tsx"]}
