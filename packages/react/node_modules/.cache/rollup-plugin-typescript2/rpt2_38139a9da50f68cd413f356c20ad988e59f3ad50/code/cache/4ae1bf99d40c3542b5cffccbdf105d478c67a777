{"code":"// https://github.com/andreypopp/react-textarea-autosize/\r\nvar HIDDEN_TEXTAREA_STYLE = \"\\n  min-height:0 !important;\\n  max-height:none !important;\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important\\n\";\r\nvar SIZING_STYLE = [\r\n    'letter-spacing',\r\n    'line-height',\r\n    'padding-top',\r\n    'padding-bottom',\r\n    'font-family',\r\n    'font-weight',\r\n    'font-size',\r\n    'font-variant',\r\n    'text-rendering',\r\n    'text-transform',\r\n    'width',\r\n    'text-indent',\r\n    'padding-left',\r\n    'padding-right',\r\n    'border-width',\r\n    'box-sizing',\r\n];\r\nvar computedStyleCache = {};\r\nvar hiddenTextarea;\r\nexport function calculateNodeStyling(node, useCache) {\r\n    if (useCache === void 0) { useCache = false; }\r\n    var nodeRef = (node.getAttribute('id') ||\r\n        node.getAttribute('data-reactid') ||\r\n        node.getAttribute('name'));\r\n    if (useCache && computedStyleCache[nodeRef]) {\r\n        return computedStyleCache[nodeRef];\r\n    }\r\n    var style = window.getComputedStyle(node);\r\n    var boxSizing = style.getPropertyValue('box-sizing') ||\r\n        style.getPropertyValue('-moz-box-sizing') ||\r\n        style.getPropertyValue('-webkit-box-sizing');\r\n    var paddingSize = parseFloat(style.getPropertyValue('padding-bottom')) +\r\n        parseFloat(style.getPropertyValue('padding-top'));\r\n    var borderSize = parseFloat(style.getPropertyValue('border-bottom-width')) +\r\n        parseFloat(style.getPropertyValue('border-top-width'));\r\n    var sizingStyle = SIZING_STYLE.map(function (name) { return name + \":\" + style.getPropertyValue(name); }).join(';');\r\n    var nodeInfo = {\r\n        sizingStyle: sizingStyle,\r\n        paddingSize: paddingSize,\r\n        borderSize: borderSize,\r\n        boxSizing: boxSizing,\r\n    };\r\n    if (useCache && nodeRef) {\r\n        computedStyleCache[nodeRef] = nodeInfo;\r\n    }\r\n    return nodeInfo;\r\n}\r\nexport default function calculateNodeHeight(uiTextNode, useCache, minRows, maxRows) {\r\n    if (useCache === void 0) { useCache = false; }\r\n    if (minRows === void 0) { minRows = null; }\r\n    if (maxRows === void 0) { maxRows = null; }\r\n    if (!hiddenTextarea) {\r\n        hiddenTextarea = document.createElement('textarea');\r\n        hiddenTextarea.setAttribute('tab-index', '-1');\r\n        hiddenTextarea.setAttribute('aria-hidden', 'true');\r\n        document.body.appendChild(hiddenTextarea);\r\n    }\r\n    // Fix wrap=\"off\" issue\r\n    // https://github.com/ant-design/ant-design/issues/6577\r\n    if (uiTextNode.getAttribute('wrap')) {\r\n        hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));\r\n    }\r\n    else {\r\n        hiddenTextarea.removeAttribute('wrap');\r\n    }\r\n    // Copy all CSS properties that have an impact on the height of the content in\r\n    // the textbox\r\n    var _a = calculateNodeStyling(uiTextNode, useCache), paddingSize = _a.paddingSize, borderSize = _a.borderSize, boxSizing = _a.boxSizing, sizingStyle = _a.sizingStyle;\r\n    // Need to have the overflow attribute to hide the scrollbar otherwise\r\n    // text-lines will not calculated properly as the shadow will technically be\r\n    // narrower for content\r\n    hiddenTextarea.setAttribute('style', sizingStyle + \";\" + HIDDEN_TEXTAREA_STYLE);\r\n    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';\r\n    var minHeight = Number.MIN_SAFE_INTEGER;\r\n    var maxHeight = Number.MAX_SAFE_INTEGER;\r\n    var height = hiddenTextarea.scrollHeight;\r\n    var overflowY;\r\n    if (boxSizing === 'border-box') {\r\n        // border-box: add border, since height = content + padding + border\r\n        height += borderSize;\r\n    }\r\n    else if (boxSizing === 'content-box') {\r\n        // remove padding, since height = content\r\n        height -= paddingSize;\r\n    }\r\n    if (minRows !== null || maxRows !== null) {\r\n        // measure height of a textarea with a single row\r\n        hiddenTextarea.value = ' ';\r\n        var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\r\n        if (minRows !== null) {\r\n            minHeight = singleRowHeight * minRows;\r\n            if (boxSizing === 'border-box') {\r\n                minHeight = minHeight + paddingSize + borderSize;\r\n            }\r\n            height = Math.max(minHeight, height);\r\n        }\r\n        if (maxRows !== null) {\r\n            maxHeight = singleRowHeight * maxRows;\r\n            if (boxSizing === 'border-box') {\r\n                maxHeight = maxHeight + paddingSize + borderSize;\r\n            }\r\n            overflowY = height > maxHeight ? '' : 'hidden';\r\n            height = Math.min(maxHeight, height);\r\n        }\r\n    }\r\n    return { height: height, minHeight: minHeight, maxHeight: maxHeight, overflowY: overflowY };\r\n}\r\n","references":[]}
