{"code":"import { __assign } from \"tslib\";\r\nimport React from 'react';\r\nimport classnames from 'classnames';\r\nimport ConfigContext from '../_config/ConfigContext';\r\nimport { warning } from '../../utils';\r\nimport IconFeather from './IconFeather';\r\nimport './Icon.style.scss';\r\nvar Icon = function (_a) {\r\n    var _b;\r\n    var type = _a.type, component = _a.component, _c = _a.size, size = _c === void 0 ? 16 : _c, rotate = _a.rotate, _d = _a.spin, spin = _d === void 0 ? false : _d, _e = _a.color, color = _e === void 0 ? \"#212B36\" : _e, onClick = _a.onClick, _f = _a.className, className = _f === void 0 ? '' : _f, style = _a.style;\r\n    if (!type && !component) {\r\n        warning('Icon', 'Empty Icon');\r\n        return null;\r\n    }\r\n    var useContext = React.useContext;\r\n    var prefix = useContext(ConfigContext).prefix;\r\n    var classPrefix = prefix + \"-icon\";\r\n    var classNames = classnames(classPrefix, className, (_b = {},\r\n        _b[classPrefix + \"--spin\"] = spin,\r\n        _b));\r\n    var shapeStyle = {\r\n        width: size,\r\n        height: size,\r\n        transform: rotate ? \"rotate(\" + rotate + \"deg)\" : undefined\r\n    };\r\n    var iconStyle = {\r\n        fill: color,\r\n    };\r\n    var IconComponent = require(\"./svgs/\" + type + \".svg\").ReactComponent;\r\n    return (<i className={classNames} style={__assign(__assign({}, style), shapeStyle)} onClick={onClick}>\n      <IconComponent style={iconStyle}/>\n    </i>);\r\n};\r\nIcon.Feather = IconFeather;\r\nexport default Icon;\r\n","references":["/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/node_modules/@types/react/index.d.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/node_modules/@types/classnames/index.d.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/_config/ConfigContext.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/utils/index.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/Icon/IconFeather.tsx"]}
