{"code":"import { __assign } from \"tslib\";\r\nimport React from 'react';\r\nimport classnames from 'classnames';\r\nimport ConfigContext from '../_config/ConfigContext';\r\nimport Text from '../Text';\r\nimport Icon from '../Icon';\r\nimport Spinner from '../Spinner';\r\nimport SelectOption from './SelectOption';\r\nimport { FadeTransition } from '../_transition';\r\nimport { convertReactNodeTo, concatReactNodeToString } from '../../utils';\r\nimport './Select.style.scss';\r\nvar Select = function (_a) {\r\n    var _b, _c, _d;\r\n    var children = _a.children, label = _a.label, name = _a.name, placeholder = _a.placeholder, _e = _a.size, size = _e === void 0 ? 'normal' : _e, _f = _a.borderType, borderType = _f === void 0 ? 'border' : _f, block = _a.block, _g = _a.disabled, disabled = _g === void 0 ? false : _g, _h = _a.align, align = _h === void 0 ? 'center' : _h, loading = _a.loading, onChange = _a.onChange, _j = _a.className, className = _j === void 0 ? '' : _j, style = _a.style, _k = _a.labelClassName, labelClassName = _k === void 0 ? '' : _k, labelStyle = _a.labelStyle, _l = _a.inputClassName, inputClassName = _l === void 0 ? '' : _l, inputStyle = _a.inputStyle;\r\n    var _m, _o;\r\n    var useContext = React.useContext, useState = React.useState, useRef = React.useRef, useEffect = React.useEffect;\r\n    var classPrefix = useContext(ConfigContext).prefix + \"-select\";\r\n    var _p = useState(false), focused = _p[0], setFocused = _p[1];\r\n    var _q = useState(), active = _q[0], setActive = _q[1];\r\n    var inputRef = useRef(null);\r\n    var inputClassNames = classnames(classPrefix, inputClassName, classPrefix + \"--size-\" + size, classPrefix + \"--border-type-\" + borderType, (_b = {},\r\n        _b[classPrefix + \"--disabled\"] = disabled,\r\n        _b[classPrefix + \"--focused\"] = focused,\r\n        _b));\r\n    var iconSize = size === 'mini' ? 14 :\r\n        size === 'small' ? 16 :\r\n            size === 'normal' ? 20 :\r\n                size === 'large' ? 24 : 30;\r\n    var handleClick = function () {\r\n        setFocused(!focused);\r\n    };\r\n    var handleClickOutside = function (event) {\r\n        if (inputRef.current && !inputRef.current.contains(event.target)) {\r\n            setFocused(false);\r\n        }\r\n    };\r\n    useEffect(function () {\r\n        if (handleClickOutside) {\r\n            document.addEventListener('mousedown', handleClickOutside);\r\n            return function () { document.removeEventListener('mousedown', handleClickOutside); };\r\n        }\r\n    }, [handleClickOutside]);\r\n    var options = convertReactNodeTo('Select', 'Select.Option', children);\r\n    return (<div className={classnames(classPrefix + \"--container\", className, (_c = {}, _c[classPrefix + \"--block\"] = block, _c))} style={style}>\n      {label ?\r\n        <Text paragraph size=\"small\" className={classnames(classPrefix + \"--label\", labelClassName)} style={labelStyle}>\n            {label}\n          </Text> :\r\n        null}\n      \n      <div ref={inputRef} className={inputClassNames} style={__assign(__assign({}, inputStyle), { textAlign: align })} onClick={handleClick}>\n        <input name={name} defaultValue={(_m = active) === null || _m === void 0 ? void 0 : _m.value} disabled={disabled}/>\n        <div className={classPrefix + \"--value\"} placeholder={placeholder}>\n          {(_o = active) === null || _o === void 0 ? void 0 : _o.title}\n        </div>\n        {loading ?\r\n        <Spinner size={iconSize} className={classPrefix + \"--caret\"}/> :\r\n        <Icon type=\"caret-down\" size={iconSize} className={classnames(classPrefix + \"--caret\", (_d = {}, _d[\"reverse\"] = focused, _d))}/>}\n      </div>\n\n      <FadeTransition show={focused}>\n        <div className={classPrefix + \"--options\"}>\n          {options\r\n        .map(function (element, index) {\r\n        var _a;\r\n        var _b;\r\n        var props = element.props;\r\n        var title = concatReactNodeToString(props.children);\r\n        var handleOptionClick = function () {\r\n            var _a;\r\n            if (!disabled) {\r\n                setActive({\r\n                    key: index,\r\n                    title: title,\r\n                    value: props.value\r\n                });\r\n                (_a = onChange) === null || _a === void 0 ? void 0 : _a(props.value);\r\n            }\r\n        };\r\n        return (<div className={classnames(classPrefix + \"-option\", (_a = {},\r\n            _a[classPrefix + \"-option--selected\"] = ((_b = active) === null || _b === void 0 ? void 0 : _b.key) === index,\r\n            _a[classPrefix + \"-option--disabled\"] = disabled,\r\n            _a))} key={index} onClick={handleOptionClick}>\n                    {props.children}\n                  </div>);\r\n    })}\n        </div>\n      </FadeTransition>\n    </div>);\r\n};\r\nSelect.Option = SelectOption;\r\nexport default Select;\r\n","references":["/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/node_modules/@types/react/index.d.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/node_modules/@types/classnames/index.d.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/_config/ConfigContext.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/Text/index.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/Icon/index.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/Spinner/index.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/Select/SelectOption.tsx","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/components/_transition/index.ts","/Users/kciter/Documents/cobalt/caple/caple-ui/packages/react/src/utils/index.ts"]}
